package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.Symbol;
class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal AND;
terminal OR;
terminal NOT;
terminal TYPE_INTEGER;
terminal TYPE_FLOAT;
terminal TYPE_STRING;
terminal IF;
terminal START_IF;
terminal END_IF;
terminal ELSE;
terminal WHILE;
terminal START_WHILE;
terminal END_WHILE;
terminal INIT;
terminal IDENTIFIER;
terminal COLON;
terminal SEMICOLON;
terminal COMMA;
terminal PUNTOYCOMA;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal LESS;
terminal LESSOREQUAL;
terminal EQUAL;
terminal GREATER;
terminal GREATEROREQUAL;

terminal GETPENULTIMATEPOSITION;
terminal TRIANGULO;
terminal LEER;
terminal ESCRIBIR;

// Non Terminals
non terminal sentence;
non terminal type;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal bloquedeclaracion;
non terminal root;
non terminal listavariables;
non terminal listaFlotante;
non terminal listaCadena;
non terminal listaEnteros;
non terminal variableIniciada;
non terminal while;
non terminal expresionTexto;

non terminal selection;
non terminal condition;
non terminal comparation;
non terminal logic_operator;
non terminal read;
non terminal write;

non terminal triangulo;
non terminal getPenultimatePosition;
non terminal list_elements;
non terminal list;


// Start Symbol Definition
start with root;

root ::= bloquedeclaracion programa {: System.out.println("Fin con variables");:};
root ::= bloquedeclaracion {: System.out.println("Fin solo variables");:};
root ::= programa {:System.out.println("Fin sin variables");:};
bloquedeclaracion ::= INIT OPEN_LLAVE CLOSE_LLAVE {: System.out.println("Bloque de variables sin variables");:};
bloquedeclaracion ::= INIT OPEN_LLAVE listavariables CLOSE_LLAVE {: System.out.println("Bloque de variables con variables");:};
listavariables ::= listavariables variableIniciada;
listavariables ::= variableIniciada;
variableIniciada ::= listaEnteros COLON TYPE_INTEGER {: System.out.println("Entero");:};
variableIniciada ::= listaCadena COLON TYPE_STRING {: System.out.println("Cadena");:};
variableIniciada ::= listaFlotante COLON TYPE_FLOAT {: System.out.println("Flotante"); :};

listaEnteros ::= listaEnteros COMMA IDENTIFIER:id {: System.out.println("Variable Entera: " + id ); new SymbolTableGenerator().addSymbol(id.toString(),Symbol.INTEGER,"-",0);:};
listaEnteros ::= IDENTIFIER:id  {: System.out.println("Variable Entera: " + id); new SymbolTableGenerator().addSymbol(id.toString(),Symbol.INTEGER,"-",0);:};

listaFlotante ::= listaFlotante COMMA IDENTIFIER:id {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().addSymbol(id.toString(),Symbol.FLOAT,"-",0); :};
listaFlotante ::= IDENTIFIER:id  {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().addSymbol(id.toString(),Symbol.FLOAT,"-",0); :};

listaCadena ::= listaCadena COMMA IDENTIFIER:id {: System.out.println("Cadena:" + id );new SymbolTableGenerator().addSymbol(id.toString(),Symbol.STRING,"-",0); :};
listaCadena ::= IDENTIFIER:id  {: System.out.println("Cadena:" + id);new SymbolTableGenerator().addSymbol(id.toString(),Symbol.STRING,"-",0); :};

programa ::= programa sentence {:System.out.println("Instruccion mas algo");:};
programa ::= sentence {:System.out.println("Instruccion");:};
sentence ::= assignment {: System.out.println("asigno valores"); :};
sentence ::= selection {:System.out.println("if");:};
sentence ::= while {:System.out.println("un while");:};
sentence ::= read | write;
assignment ::= IDENTIFIER:id ASSIG expression {: System.out.println("Assignment: " + id ); :};
assignment ::= IDENTIFIER ASSIG expresionTexto {: System.out.println("Text Assignment"); :};
assignment ::= IDENTIFIER ASSIG triangulo {: System.out.println("triangulo Assignment"); :};
assignment ::= IDENTIFIER ASSIG getPenultimatePosition {: System.out.println("GetPenultimatePosition Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().addSymbol("_"+id.toString(),Symbol.INTEGER,"-",0); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant Float: " + constant );new SymbolTableGenerator().addSymbol("_"+constant.toString(),Symbol.FLOAT,constant.toString(),0); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
expresionTexto ::= STRING_CONSTANT:cte {:new SymbolTableGenerator().addSymbol("_" + cte.toString(),Symbol.STRING,cte.toString(),cte.toString().length);:};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE ELSE OPEN_LLAVE  programa CLOSE_LLAVE {: System.out.println( "Seleccion con else" ); :};
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println( "Seleccion sin else" ); :};

while ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println( "while" ); :};

condition ::= expression comparation expression {: System.out.println( "comparacion simple" ); :};
condition ::= expression comparation expression logic_operator expression comparation expression {: System.out.println( "comparacion doble" ); :};
condition ::= NOT expression comparation expression {: System.out.println( "comparacion negada" ); :};
logic_operator ::= AND {: System.out.println( "and" ); :};
logic_operator ::= OR {: System.out.println( "or" ); :};
comparation ::= LESS {: System.out.println( "<" ); :};
comparation ::= LESSOREQUAL {: System.out.println( "<=" ); :};
comparation ::= EQUAL {: System.out.println( "==" ); :};
comparation ::= GREATER {: System.out.println( ">" ); :};
comparation ::= GREATEROREQUAL {: System.out.println( ">=" ); :};

read ::= LEER OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("Lectura");:};
write ::= ESCRIBIR OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Escritura de numeros");:};
write ::= ESCRIBIR OPEN_BRACKET expresionTexto CLOSE_BRACKET {: System.out.println("Escritura de texto");:};

triangulo ::= TRIANGULO OPEN_BRACKET expression COMMA expression COMMA expression CLOSE_BRACKET  {: System.out.println("triangulo");:};
list ::= OPEN_CORCHETE list_elements CLOSE_CORCHETE {: System.out.println("list");:};

list_elements ::= list_elements COMMA expression {: System.out.println("list_elements");:};
list_elements  ::= expression {: System.out.println("list_elements con expr");:};

getPenultimatePosition ::= GETPENULTIMATEPOSITION OPEN_BRACKET list CLOSE_BRACKET {: System.out.println("getPenultimatePosition  ");:};
