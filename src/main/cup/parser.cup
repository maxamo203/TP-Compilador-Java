package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.Symbol;
import lyc.compiler.files.Nodo;
import lyc.compiler.files.Punteros;
class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal AND;
terminal OR;
terminal NOT;
terminal TYPE_INTEGER;
terminal TYPE_FLOAT;
terminal TYPE_STRING;
terminal IF;
terminal START_IF;
terminal END_IF;
terminal ELSE;
terminal WHILE;
terminal START_WHILE;
terminal END_WHILE;
terminal INIT;
terminal IDENTIFIER;
terminal COLON;
terminal COMMA;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal LESS;
terminal LESSOREQUAL;
terminal EQUAL;
terminal GREATER;
terminal GREATEROREQUAL;

terminal GETPENULTIMATEPOSITION;
terminal TRIANGULO;
terminal LEER;
terminal ESCRIBIR;

// Non Terminals
non terminal sentence;
non terminal type;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal bloquedeclaracion;
non terminal root;
non terminal listavariables;
non terminal listaIds;
non terminal while;
non terminal expresionTexto;

non terminal selection;
non terminal ifsimple;
non terminal ifelse;
non terminal condition;
non terminal condition_simple;
non terminal condition_double;
non terminal condition_negated;
non terminal comparation;
non terminal logic_operator;
non terminal read;
non terminal write;

non terminal triangulo;
non terminal getPenultimatePosition;
non terminal list_elements;
non terminal list;


// Start Symbol Definition
start with root;

root ::= bloquedeclaracion programa 
    {: System.out.println("Fin con variables");
    Punteros.p_root = Punteros.p_programa;:};

root ::= bloquedeclaracion 
    {: System.out.println("Fin solo variables");
    Punteros.p_root = null;:};

root ::= programa 
    {:System.out.println("Fin sin variables");
    Punteros.p_root = Punteros.p_programa; :};

bloquedeclaracion ::= INIT OPEN_LLAVE listavariables CLOSE_LLAVE 
    {: System.out.println("Bloque de variables con variables");:};

bloquedeclaracion ::= INIT OPEN_LLAVE CLOSE_LLAVE 
    {: System.out.println("Bloque de variables sin variables");:};

listavariables ::= listavariables listaIds COLON type;
listavariables ::= listaIds COLON type;
listaIds ::= listaIds COMMA IDENTIFIER:id 
    {:System.out.println("Id: "+ id + "|y algo mas");new SymbolTableGenerator().addSymbol(id.toString(),Symbol.UNKNOWN,"-",0);:};

listaIds ::= IDENTIFIER:id 
    {:System.out.println("Id: "+ id);new SymbolTableGenerator().addSymbol(id.toString(),Symbol.UNKNOWN,"-",0);:};

type ::= TYPE_STRING:tipo 
    {:System.out.println("tipo: "+ "String");:};

type ::= TYPE_FLOAT:tipo 
    {:System.out.println("tipo: "+ "Float");:};

type ::= TYPE_INTEGER:tipo 
    {:System.out.println("tipo: "+ "Int");:};


programa ::= programa sentence 
    {:System.out.println("Instruccion mas algo");
    Punteros.p_programa = Nodo.crearNodoDummy(Punteros.p_programa, Punteros.p_sentencia);:};

programa ::= sentence 
    {:System.out.println("Instruccion");
    Punteros.p_programa = Punteros.p_sentencia;:};

sentence ::= assignment 
    {: System.out.println("asigno valores");
    Punteros.p_sentencia = Punteros.p_asignacion; :};

sentence ::= selection 
    {:System.out.println("if");
    Punteros.p_sentencia = Punteros.p_seleccion;:};

sentence ::= while 
    {:System.out.println("un while");
    Punteros.p_sentencia = Punteros.p_while;:};

sentence ::= read 
    {:System.out.println("read");
    Punteros.p_sentencia = Punteros.p_read;:};
sentence ::= write
    {:System.out.println("write");
    Punteros.p_sentencia = Punteros.p_write;:};

assignment ::= IDENTIFIER:id ASSIG expression 
    {: System.out.println("Assignment: " + id );
    Punteros.p_asignacion = Nodo.crearNodo("=", Nodo.crearHijo(id+""), Punteros.p_expresion); :};

assignment ::= IDENTIFIER ASSIG expresionTexto 
    {: System.out.println("Text Assignment"); :};

assignment ::= IDENTIFIER:id ASSIG triangulo 
    {: System.out.println("triangulo Assignment");
    Punteros.p_asignacion = Nodo.crearNodo("=", Nodo.crearHijo(id+""), Punteros.p_triangulo ); :};

assignment ::= IDENTIFIER:id ASSIG getPenultimatePosition 
    {: System.out.println("GetPenultimatePosition Assignment");
    Punteros.p_asignacion = Nodo.crearNodo("=", Nodo.crearHijo(id+""), Punteros.p_getPenultimatePosition ); :};

expression ::= expression PLUS term 
    {: System.out.println("+ suma");
    Punteros.p_expresion = Nodo.crearNodo("+", Punteros.p_expresion, Punteros.p_term); :};

expression ::= expression SUB term 
    {: System.out.println("- resta");
    Punteros.p_expresion = Nodo.crearNodo("-", Punteros.p_expresion, Punteros.p_term);:};

expression ::= term 
    {: System.out.println("Expression = Term");
    Punteros.p_expresion = Punteros.p_term;:};

term ::= term MULT factor 
    {: System.out.println("* multiplicacion");
    Punteros.p_term = Nodo.crearNodo("*", Punteros.p_term, Punteros.p_factor); :};

term ::= term DIV factor 
    {: System.out.println("/ division"); 
    Punteros.p_term = Nodo.crearNodo("/", Punteros.p_term, Punteros.p_factor);:};

term ::= factor 
    {: System.out.println("Term = factor"); 
    Punteros.p_term = Punteros.p_factor;:};


factor ::= SUB factor
    {: System.out.println("- unario");
    Punteros.p_factor = Nodo.crearNodo("-", Nodo.crearHijo("0"),Punteros.p_factor);:};

factor ::= IDENTIFIER:id  
    {: System.out.println("Id: " + id);
    Punteros.p_factor = Nodo.crearHijo(id+""); :};

factor ::= INTEGER_CONSTANT:constant 
    {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().addSymbol("_"+constant.toString(),Symbol.INTEGER,"-",0);
    Punteros.p_factor = Nodo.crearHijo(constant+""); :};

factor ::= FLOAT_CONSTANT:constant 
    {: System.out.println("Constant Float: " + constant );new SymbolTableGenerator().addSymbol("_"+constant.toString(),Symbol.FLOAT,constant.toString(),0);
        Punteros.p_factor = Nodo.crearHijo(constant+""); :};

factor ::= OPEN_BRACKET {:Punteros.Apilar(Punteros.p_term);Punteros.Apilar(Punteros.p_expresion);:} expression CLOSE_BRACKET 
    {: System.out.println("Factor = (Expression)");
    Punteros.p_factor = Punteros.p_expresion; Punteros.p_expresion = Punteros.Desapilar(); Punteros.p_term = Punteros.Desapilar(); :};

expresionTexto ::= STRING_CONSTANT:cte 
    {:new SymbolTableGenerator().addSymbol("_" + cte.toString(),Symbol.STRING,cte.toString(),cte.toString().length()-2);
    Punteros.p_expresion_texto = Nodo.crearHijo(cte+"");:};





selection ::= ifsimple
    {:System.out.println("if simple");
    Punteros.p_seleccion = Nodo.crearNodo("IF", Punteros.Desapilar(), Punteros.p_cuerpoIf);:};
selection ::= ifelse 
    {:System.out.println("if else");
    Punteros.p_cuerpoIf = Punteros.Desapilar();
    Punteros.p_condicion = Punteros.Desapilar();
    Punteros.p_seleccion = Nodo.crearNodo("IF", Punteros.p_condicion,Nodo.crearNodo("ELSE",Punteros.p_cuerpoIf ,Punteros.p_cuerpoElse));:};

ifsimple ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_LLAVE {:Punteros.Apilar(Punteros.p_condicion);Punteros.Apilar(Punteros.p_programa); :} programa CLOSE_LLAVE 
    {:  Punteros.p_cuerpoIf = Punteros.p_programa;
    Punteros.p_programa = Punteros.Desapilar(); :};

ifelse ::= ifsimple ELSE {:Punteros.Apilar(Punteros.p_cuerpoIf);Punteros.Apilar(Punteros.p_programa); :} OPEN_LLAVE  programa CLOSE_LLAVE 
    {: Punteros.p_cuerpoElse = Punteros.p_programa;
    Punteros.p_programa = Punteros.Desapilar(); :};



while ::= WHILE OPEN_BRACKET condition {:Punteros.Apilar(Punteros.p_programa);Punteros.Apilar(Punteros.p_condicion);:} CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE 
    {: System.out.println( "while" );
    Punteros.p_while = Nodo.crearNodo("WHILE", Punteros.Desapilar(), Punteros.p_programa);
    Punteros.p_programa = Punteros.Desapilar(); :};

condition ::= condition_simple 
    {: System.out.println( "condicion simple" ); :};
condition ::= condition_double 
    {: System.out.println( "condicion doble" ); :};
condition ::= condition_negated 
    {: System.out.println( "condicion negada" ); :};

condition_simple ::= expression {:Punteros.Apilar(Punteros.p_expresion);:} comparation expression 
    {: System.out.println( "comparacion simple" ); 
    Punteros.p_condicion = Nodo.agregarHijos(Punteros.Desapilar(),Punteros.Desapilar(),Punteros.p_expresion);:}; //primero apilo la expresion y luego la comparacion //TODO: Ver si hay que cambiar el orden

condition_double ::= condition_simple {:Punteros.Apilar(Punteros.p_condicion);:} logic_operator condition_simple
    {: System.out.println( "comparacion doble" ); 
    Punteros.p_condicion = Nodo.agregarHijos(Punteros.Desapilar(), Punteros.Desapilar(), Punteros.p_condicion);:};

condition_negated ::= NOT condition_simple 
    {: System.out.println( "comparacion negada" );
     Punteros.p_condicion = Nodo.crearNodo("NOT", Punteros.p_condicion, null);:};

logic_operator ::= AND 
    {: System.out.println( "and" );
    Punteros.Apilar(Nodo.crearHijo("AND")); :};

logic_operator ::= OR 
    {: System.out.println( "or" );
    Punteros.Apilar(Nodo.crearHijo("OR")); :};

comparation ::= LESS 
    {: System.out.println( "<" );
    Punteros.Apilar(Nodo.crearHijo("<")); :};

comparation ::= LESSOREQUAL 
    {: System.out.println( "<=" );
    Punteros.Apilar(Nodo.crearHijo("<=")); :};

comparation ::= EQUAL 
    {: System.out.println( "==" );
    Punteros.Apilar(Nodo.crearHijo("==")); :};

comparation ::= GREATER 
    {: System.out.println( ">" );
    Punteros.Apilar(Nodo.crearHijo(">")); :};

comparation ::= GREATEROREQUAL 
    {: System.out.println( ">=" );
    Punteros.Apilar(Nodo.crearHijo(">=")); :};




read ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET 
    {: System.out.println("Lectura");
    Punteros.p_read = Nodo.crearNodo("READ", Nodo.crearHijo(id+""), null);:};

write ::= ESCRIBIR OPEN_BRACKET expression CLOSE_BRACKET 
    {: System.out.println("Escritura de numeros");
    Punteros.p_write = Nodo.crearNodo("WRITE", Punteros.p_expresion, null);:};

write ::= ESCRIBIR OPEN_BRACKET expresionTexto CLOSE_BRACKET 
    {: System.out.println("Escritura de texto");
    Punteros.p_write = Nodo.crearNodo("WRITE", Punteros.p_expresion_texto, null);:};


triangulo ::= TRIANGULO OPEN_BRACKET expression {:Punteros.p_triangulo = Nodo.crearNodo("=",Nodo.crearHijo("@tri1"), Punteros.p_expresion);:} 
            COMMA expression {:
                Punteros.p_triangulo = Nodo.crearNodoDummy(Punteros.p_triangulo, Nodo.crearNodo("=",Nodo.crearHijo("@tri2"), Punteros.p_expresion));
                :}
            COMMA expression {:
                Punteros.p_triangulo = Nodo.crearNodoDummy(Punteros.p_triangulo, Nodo.crearNodo("=",Nodo.crearHijo("@tri3"), Punteros.p_expresion));
                :}
            CLOSE_BRACKET  
            {: System.out.println("triangulo");
            Nodo comp1 = Nodo.crearNodo("==",Nodo.crearHijo("@tri1"),Nodo.crearHijo("@tri2"));
            Nodo comp2 = Nodo.crearNodo("==",Nodo.crearHijo("@tri2"),Nodo.crearHijo("@tri3"));
            Nodo comp3 = Nodo.crearNodo("==",Nodo.crearHijo("@tri2"),Nodo.crearHijo("@tri3"));
            Nodo comp4 = Nodo.crearNodo("==",Nodo.crearHijo("@tri1"),Nodo.crearHijo("@tri3"));
            Nodo cuerpo1 = Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_equilatero"));
            Nodo cuerpo2 = Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles"));
            Nodo cuerpo3 = Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles"));
            Nodo cuerpo4 = Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles"));
            Nodo cuerpo5 = Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_escaleno"));
            Nodo miniIf1 = Nodo.crearNodo("IF",comp2,Nodo.crearNodo("ELSE",cuerpo1,cuerpo2));
            Nodo miniIf2 = Nodo.crearNodo("IF",comp4,Nodo.crearNodo("ELSE",cuerpo4,cuerpo5));
            Nodo medioIf = Nodo.crearNodo("IF",comp3,Nodo.crearNodo("ELSE",cuerpo3,miniIf2));

            Punteros.p_triangulo = Nodo.crearNodoDummy(Punteros.p_triangulo,Nodo.crearNodo("IF",comp1,
                        Nodo.crearNodo("ELSE",miniIf1,medioIf)));
            :};
// a,b,c
// if(a==b){
//     if(b==c){
//         equilatero
//     }else{
//         isosceles
//     }
// }else{
//     if(b==c){
//         isosceles
//     }else{
//         if(a==c){
//             isosceles
//         }else{
//             escaleno
//         }
//     }
// }
//Punteros.p_triangulo = Nodo.crearNodoDummy(Punteros.p_triangulo,Nodo.crearNodo("IF",Nodo.crearNodo("==",Nodo.crearHijo("@tri1"),Nodo.crearHijo("@tri2")),Nodo.crearNodo("ELSE",Nodo.crearNodo("IF",Nodo.crearNodo("==",Nodo.crearHijo("@tri2"),Nodo.crearHijo("@tri3")),Nodo.crearNodo("ELSE",Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_equilatero")),Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles")))),Nodo.crearNodo("IF",Nodo.crearNodo("==",Nodo.crearHijo("@tri2"),Nodo.crearHijo("@tri3")),Nodo.crearNodo("ELSE",Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles")),Nodo.crearNodo("IF",Nodo.crearNodo("==",Nodo.crearHijo("@tri1"),Nodo.crearHijo("@tri3")),Nodo.crearNodo("ELSE",Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_isoceles")),Nodo.crearNodo("=",Nodo.crearHijo("@triangulo"),Nodo.crearHijo("_escaleno")))))))));

list ::= OPEN_CORCHETE list_elements CLOSE_CORCHETE 
    {: System.out.println("list");:};


list_elements ::= list_elements COMMA expression 
    {: System.out.println("list_elements");
    Punteros.Apilar(Punteros.p_expresion);:};

list_elements  ::= expression 
    {: System.out.println("list_elements con expr");
    Punteros.Apilar(Punteros.p_expresion);:};


getPenultimatePosition ::= GETPENULTIMATEPOSITION OPEN_BRACKET {:Punteros.Apilar(Nodo.crearHijo("@PENULTIMATE"));:} list CLOSE_BRACKET 
    {: System.out.println("getPenultimatePosition");
    Punteros.Desapilar();
    Nodo nodoUtil = Punteros.Desapilar();
    if(nodoUtil.getPayload().equals("@PENULTIMATE")){//No hay penultimo
        Punteros.p_getPenultimatePosition = Nodo.crearHijo("0");
    }else{
        Punteros.p_getPenultimatePosition = nodoUtil;
        while(!Punteros.Desapilar().getPayload().equals("@PENULTIMATE")){} //Limpia la pila a como estaba antes
    }
    :};


//EN CASO DE QUILOMBO, SACAR LAS DOS LINEAS DE ABAJO 👍
selection ::= START_IF condition END_IF OPEN_LLAVE programa CLOSE_LLAVE 
    {: System.out.println( "Seleccion sin else ¿?" ); :};

while ::= START_WHILE condition END_WHILE OPEN_LLAVE programa CLOSE_LLAVE 
    {: System.out.println( "while ¿¿??" ); :};

